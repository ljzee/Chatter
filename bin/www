#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('realtime-chat-app:server');
var http = require('http');
var { Server } = require("socket.io");
var UserManager = require('../classes/UserManager');
var User = require('../classes/User');
var JwtConfig = require('../config/jwtConfig');
const jsonwebtoken = require('jsonwebtoken');
const ChatService = require('../services/chatService');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Socket.io server and mount it on the HTTP server
 */
const io = require('../helper/io').initialize(server);

io.on("connection", async (socket) => {
  var decodedToken = jsonwebtoken.verify(socket.handshake.auth.token, JwtConfig.secret);
  var userId = decodedToken.sub;

  var user = null;
  if(UserManager.hasUser(userId)) {
    user = UserManager.getUser(userId);
    user.addSocket(socket);
  } else {
    user = new User(userId, socket);
    UserManager.addUser(user);
  }

  const chatIds = await ChatService.getUserChatIds(userId);
  user.joinChats(chatIds);

  socket.on("user-activity", () => {
    user.touchLastActivityTimestamp();
  });

  socket.on("disconnect", (reason) => {
    user.removeSocket(socket.id);

    if(!user.isConnected()) {
      UserManager.removeUser(userId);
    }
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
